CREATE DATABASE BIKE
USE[BIKE]

CREATE SCHEMA SALES
CREATE SCHEMA PRODUCTION

CREATE TABLE SALES.CUSTOMERS(
customer_id     INT PRIMARY KEY IDENTITY,
first_name      VARCHAR(50),
last_name       VARCHAR(50),
phone           VARCHAR(10),
email           VARCHAR(50) UNIQUE,
street          VARCHAR(50),
city            VARCHAR(20),
state           VARCHAR(20),
zip_code        varchar(6)
);
SELECT * FROM SALES.CUSTOMERS


CREATE TABLE SALES.STORES(
store_id     INT PRIMARY KEY IDENTITY,
store_name   VARCHAR(50),
phone        VARCHAR(10),
email        VARCHAR(50) UNIQUE,
street       VARCHAR(50),
city         VARCHAR(20),
state        VARCHAR(20),
zip_code     varchar(6)
);
SELECT * FROM SALES.STORES

CREATE TABLE SALES.STAFF(
staff_id     INT PRIMARY KEY,
first_name   VARCHAR(50) NOT NULL,
last_name    VARCHAR(50) NOT NULL,
phone        VARCHAR(10) UNIQUE,
email        VARCHAR(50) UNIQUE,
active       VARCHAR(20) NOT NULL,
store_id     INT NOT NULL,
manager_id   INT NOT NULL,
CONSTRAINT FK_STAFF_STORES FOREIGN KEY (store_id )
REFERENCES SALES.STORES(store_id)
);
SELECT * FROM SALES.STAFF


CREATE TABLE SALES.ORDERS(
order_id       INT PRIMARY KEY,
customer_id    INT NOT NULL,
order_state    VARCHAR(20) NOT NULL,
required_date  DATE NOT NULL,
shipped_date   DATE NOT NULL,
store_id       INT NOT NULL,
staff_id       INT NOT NULL,
CONSTRAINT FK_ORDERS_STORES FOREIGN KEY (store_id )
REFERENCES SALES.STORES(store_id),
CONSTRAINT FK_ORDERS_STAFF FOREIGN KEY (staff_id )
REFERENCES SALES.STAFF(staff_id)
);

SELECT * FROM SALES.STAFF

CREATE TABLE SALES.OEDER_ITEMS(
item_id       INT PRIMARY KEY,
order_id      INT NOT NULL,
product_id    INT NOT NULL,
quantity      INT CHECK(quantity>0) NOT NULL,
list_price    INT CHECK(list_price>0)  NOT NULL,
discount      INT NOT NULL,
CONSTRAINT FK_ORDERS_ITEMS_ORDERS FOREIGN KEY (order_id )
REFERENCES SALES.ORDERS(order_id)
);
SELECT * FROM SALES.OEDER_ITEMS;

ALTER TABLE SALES.OEDER_ITEMS
ADD order_amount AS (quantity*list_price)

SELECT * FROM SALES.OEDER_ITEMS;


CREATE TABLE PRODUCTION.CATEGORIES(
categories_id  INT PRIMARY KEY,
category_name  varchar(20)
);
SELECT * FROM  PRODUCTION.CATEGORIES

CREATE TABLE PRODUCTION.BRANDS(
brand_id      INT PRIMARY KEY,
brand_name    VARCHAR(50) NOT NULL
);
SELECT * FROM  PRODUCTION.BRANDS

CREATE TABLE PRODUCTION.PRODUCTS(
product_id      INT PRIMARY KEY,
product_name    VARCHAR(20) NOT NULL,
brand_id        INT NOT NULL,
category_id     INT NOT NULL,
model_year      INT NOT NULL,
list_price      VARCHAR(50) NOT NULL,
CONSTRAINT FK_PRODUCTS_BRANDS FOREIGN KEY (brand_id )
REFERENCES PRODUCTION.BRANDS(brand_id)
);
SELECT * FROM  PRODUCTION.PRODUCTS

CREATE TABLE PRODUCTION.STOCKS(
store_id     INT NOT NULL,
product_id   INT NOT NULL,
CONSTRAINT FK_STOCKS_STORES FOREIGN KEY (store_id )
REFERENCES SALES.STORES(store_id),
CONSTRAINT FK_STOCKS_PRODUCTS FOREIGN KEY (product_id )
REFERENCES PRODUCTION.PRODUCTS(product_id),
);
SELECT * FROM  PRODUCTION.STOCKS

ALTER TABLE SALES.OEDER_ITEMS
ADD CONSTRAINT FK_OEDER_ITEMS_PRODUCTS FOREIGN KEY (product_id )
REFERENCES PRODUCTION.PRODUCTS(product_id)

SELECT * FROM  SALES.OEDER_ITEMS
 
-
